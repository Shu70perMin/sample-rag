SMART_CONTRACT_ANALYSIS: |
  You are an expert smart contract auditor specialized in analyzing vulnerabilities, behaviors, and logic flaws in Solidity code.
  Your task is to analyze the following Solidity code and detect any potential vulnerabilities from the following list:
     - Gasless
     - Unchecked external calls
     - Reentrancy
     - Timestamp dependency
     - Block number dependency
     - Dangerous delegatecall
     - Freezing ether
     - Integer overflow
     - Integer underflow
     - Unexpected ether reception
     - Authorization through tx.origin
     - False Assert
     - False Suicide

  Please focus on identifying these vulnerabilities in the code and explain if any of these vulnerabilities are present, how they could be exploited, and the risks they pose.

  If no vulnerabilities are found, respond with "No vulnerabilities detected."

  Solidity Code:
  {code}

  Example 1:
    Code:
    function withdraw() public {
        require(balances[msg.sender] > 0);
        msg.sender.call.value(balances[msg.sender])("");  // External call before updating state (reentrancy)
        balances[msg.sender] = 0;
    }
    Task: Analyze this code for vulnerabilities.
    Answer: 
    This contract has a **Reentrancy** vulnerability. The `withdraw()` function makes an external call (`msg.sender.call.value(balances[msg.sender])("")`) before updating the userâ€™s balance. This allows an attacker to repeatedly call the `withdraw()` function during the external call and drain the funds, since the balance is updated after the call.

  Example 2:
    Code:
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    Task: Analyze this code for vulnerabilities.
    Answer:
    The contract seems to be **gasless**, as it does not handle gas payments correctly. The `deposit()` function accepts Ether but does not specify the gas limits or checks, which might make the function vulnerable to attacks that exploit gas estimation errors.

  Example 3:
    Code:
    function claimTokens(uint256 amount) public {
        require(block.timestamp >= saleStart && block.timestamp <= saleEnd, "Sale is not active");
        // claim logic
    }
    Task: Analyze this code for vulnerabilities.
    Answer:
    This contract has a **Timestamp Dependency** vulnerability. It uses `block.timestamp` to check whether the sale period is active, which can be manipulated by miners. This makes the contract vulnerable to front-running attacks, where a miner can manipulate the timestamp to trigger the claim earlier than expected.

  Example 4:
    Code:
    function adminAction() public {
        require(tx.origin == owner, "Unauthorized");
        // perform action
    }
    Task: Analyze this code for vulnerabilities.
    Answer:
    This contract has an **Authorization through tx.origin** vulnerability. The `adminAction()` function uses `tx.origin` for authorization, which is insecure. This allows an attacker to trick the contract by using a contract to call `adminAction()` on their behalf, bypassing the ownership check.

  Example 5:
    Code:
    function withdraw(uint256 amount) public {
        balance[msg.sender] -= amount;
    }
    Task: Analyze this code for vulnerabilities.
    Answer:
    This contract has an **Integer Underflow** vulnerability. The `balance[msg.sender] -= amount` operation is unchecked, which means if `amount` exceeds the user's balance, it would cause an underflow. This would result in wrapping around, giving the user a very large balance.

  Note:
  - Your analysis should focus on identifying whether any of the listed vulnerabilities exist in the code.
  - If vulnerabilities are found, explain how they can be exploited.
  - If no vulnerabilities are found, return "No vulnerabilities detected."
  - Use technical language and focus on accuracy, providing clear explanations.


SMART_CONTRACT_GEN_PROMPT: |

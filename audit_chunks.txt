Title: SLD-1:

Description:
The SSVault.dexType is used to denote the DEX to be v2 (value 0) type or v3 (value 1, 2) type.
However, value 0 can also be uninitialized default value of uint256 type, hence it is recommended to
use 0 as the undefined DEX type and 1, 2, 3 for the actual DEX type values.

Recommendation:
Use Enums to define the types and reserve the value 0 to be the undefined DEX type.

Code:
59: uint256 public dexType; // 0 V2, 1 V3
496: if (dexType == 0) {
497: oracle.update();
498: } else {
499: require(dexType == 1 || dexType == 2, "wrong dex type");
500: require(block.timestamp > endTime, "not end");
501: }

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Code Style Informational contracts/ssvault/SSVault.sol:59,496 Fixed
---
Title: SLD-2:

Description:
The function deposit(), withdraw(), payMargin(), paySLDMargin(), withdrawMargin() in
the SSVault has risk of reentrancy because of ERC777 token call back function. Taking deposit()
function for example, address(baseToken) can be ERC777 token and if the contract has registered
ERC1820 for callback function, ERC777._callTokensToSend() will be called and malicious code
can call deposit() again to re-enter. Because _amount value is updated after the
_safeTransferFrom() call, this can lead to more _amount to be deposited than the maxVolume.

Recommendation:
Use Checks-Effects-Interaction pattern in the code and ReentrancyGuard.sol to prevent the
possible reentrancy attacks.
8
Shield SS-Vault Security Assessment

Code:
180: function deposit(uint256 _amount) public notTerminated {
181: require(_amount >= minDeposit, "deposit amount too small");
182: require(block.timestamp < endTime, "vault ended");
183: require(totalDeposit.add(_amount) <= maxVolume, "exceed vault volume");
184:
185: UserInfo storage info = userInfo[msg.sender];
186:
187: require(
188: info.totalDeposit.add(_amount) <= maxDeposit,
189: "exceed individual deposit"
190: );
191:
192: uint256 _before = baseToken.balanceOf(address(this));
193: _safeTransferFrom(
194: address(baseToken),
195: msg.sender,
196: address(this),
197: _amount
198: );
199: uint256 _after = baseToken.balanceOf(address(this));
200: // Additional check for deflationary tokens
201: _amount = _after.sub(_before);

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Logical Critical contracts/ssvault/SSVault.sol Fixed
---
Title: SLD-3:

Description:
The function sendSettleRewards() sends sldToken at the end based on gas consumed to
msg.sender to encourage users to actively maintain the contract state. However, the gas and SLD
token prices are maintained by the contract owner as the state variable. If the gasPrice and
sldPriceForRewardsNumerator token price are not updated in time and are far from what the
current market price is, the attacker can repeatedly call SSVault::updatePrice() to obtain
SldTokens and sell them to complete the arbitrage.

Recommendation:
Use oracle to get the update to date SLD token and gas price.

Code:
395: function sendSettleRewards(uint256 _gasUsed) internal {
396: uint256 gasFeeUsed = _gasUsed
397: .mul(gasPrice)
398: .mul(getBNBPrice())
399: .mul(feebackNumerator)
400: .div(feebackDenominator)
401: .div(MULTIPLIER);
402:
403: uint256 rewards = gasFeeUsed.mul(sldPriceForRewardsDenominator).div(
404: sldPriceForRewardsNumerator
405: );
406:
407: if (rewards > 0) {
408: sldMargin = sldMargin.sub(rewards);
409: _safeTransfer(address(sldToken), msg.sender, rewards);
410: }
411: }

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Logical Critical contracts/ssvault/SSVault.sol:397,403 Acknowledged
---
Title: SLD-4:

Description:
The orderIDs[i] value can potentially point to an invalid order.

Recommendation:
Verify the index is valid by orderIDs[i] < orders.length check.

Code:
379: function settleOrders(uint256[] memory orderIDs) public {
380: uint256 gasUsed;
381:
382: require(isStriked, "not strike");
383: require(settledPrice > 0, "need settle price");
384: require(!isAllSettled(), "all settled");
385:
386: for (uint256 i = 0; i < orderIDs.length; i++) {
387: gasUsed = gasUsed + settleOrder(orderIDs[i]);
388: }

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Logical Medium contracts/ssvault/SSVault.sol:387 Fixed
---
Title: SLD-5:

Description:
State variable tokenAggregator is initialized in the constructor but never used anywhere else.

Recommendation:
Check if tokenAggregator is indeed needed.

Code:
26: address public tokenAggregator;

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Logical Informational contracts/ssvault/SSVault.sol:26 Acknowledged
---
Title: SLD-6:

Description:
It is recommended to have consistent naming convention across variables.

Recommendation:
Rename meanPricePeriod to MEAN_PRICE_PERIOD for constant naming consistency.

Code:
10: contract SSVaultManager {
11: using SafeMath for uint256;
12:
13: uint256 internal constant MULTIPLIER = 1e18;
14: uint256 internal constant DECIMALS = 18;
15: uint256 internal constant SECONDS_IN_YEAR = 365 days;
16: uint256 internal constant meanPricePeriod = 30 minutes;

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Code Style Informational contracts/ssvault/SSVaultManager.sol:16 Fixed
---
Title: SLD-7:

Description:
Index the parameters in the defined event such as event VaultCreated to help easier consuming
the contract on-chain data by filtering the desired indexed field.

Recommendation:
Add indexed keywords to important parameter fields.

Code:
53: event VaultCreated(
54: address vault,
55: address holder,
56: address token0,
57: address token1,
58: uint256 maxVolume,
59: uint256 timestamp
60: );
61: event OracleCreated(address vault, address oracle);
62:
63: event SetMarginRatio(uint256 oldValue, uint256 newValue);
64: event SetMinVolume(uint256 oldValue, uint256 newValue);
65: event SetMinPeriod(uint256 oldValue, uint256 newValue);
66: event SetGovernance(address oldValue, address newValue);
67:
68: event SetFeeRatio(address vault, uint256 value);
69: event SetGasPrice(address vault, uint256 value);
70: event SetSLDPrice(address vault, uint256 value0, uint256 value1);
71: event SetParameters(address vault, uint256 value0, uint256 value1);
72: event SetOracle(address vault, address value);

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Language Specific Informational contracts/ssvault/SSVaultManager.sol:53-72 Acknowledged
---
Title: SLD-8:

Description:
The secondsAgo parameter is not honored in the consult() function implementation but in the
SSVault.getTokenValue(), parameter 60 is passed in. From the interface abstraction perspective,
all the child contracts should implement ShieldOracle interface features, and secondsAgo
represents the valid time frame of the price is valid for, hence ShieldOracleV2 should also
implement it. From security perspective, enforce the price valid time can prevent the stale price to be
used accidentally for contract calculation.

Recommendation:
Add a check comparing with blockTimestampLast, which is updated in the
ShieldOracle.update() function. And require the block.timestamp is within secondsAgo.

Code:
86: function consult(address tokenIn, uint32 secondsAgo)

Category: Severity Code Reference Status

Severity: Code Reference Status

Status: Logical Medium contracts/ssvault/ShieldOracleV2.sol:86 Fixed
---

---
